{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\testProject\\\\my-app\\\\src\\\\ChatForm.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatForm(props) {\n  _s();\n  const {\n    status,\n    startRecording,\n    stopRecording,\n    mediaBlobUrl\n  } = useReactMediaRecorder({\n    audio: true\n  });\n  const handleVoiceSubmit = async () => {\n    stopRecording();\n\n    // After stopping the recording, send the audio to server\n    // Wait until we have a blob URL\n    if (status === \"stopped\") {\n      const response = await fetch(mediaBlobUrl);\n      const blob = await response.blob();\n\n      // Use FormData to send the audio file\n      let formData = new FormData();\n      formData.append(\"audio\", blob);\n\n      // Send the audio file to your server\n      fetch(\"http://localhost:8000/chat/audio\", {\n        method: \"POST\",\n        body: formData\n      }).then(response => response.json()).then(data => {\n        // Assuming server responds with text corresponding to the audio\n        // Inject this text into the chat input and submit the form\n        props.handleInput({\n          target: {\n            value: data.text\n          }\n        });\n        props.handleSubmit();\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.handleSubmit,\n    className: \"border-t-2 border-gray-700 p-6 flex justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.input,\n      onChange: props.handleInput,\n      className: \"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: \"Ask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: status === \"recording\" ? handleVoiceSubmit : startRecording,\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: status === \"recording\" ? \"Stop Recording\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatForm, \"AQyZcADfRFY9tEwbe8KCMpNJ0rE=\", false, function () {\n  return [useReactMediaRecorder];\n});\n_c = ChatForm;\nexport default ChatForm;\nvar _c;\n$RefreshReg$(_c, \"ChatForm\");","map":{"version":3,"names":["React","useReactMediaRecorder","jsxDEV","_jsxDEV","ChatForm","props","_s","status","startRecording","stopRecording","mediaBlobUrl","audio","handleVoiceSubmit","response","fetch","blob","formData","FormData","append","method","body","then","json","data","handleInput","target","value","text","handleSubmit","onSubmit","className","children","type","input","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/testProject/my-app/src/ChatForm.js"],"sourcesContent":["import React from 'react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\n\r\nfunction ChatForm(props) {\r\n    const {\r\n        status,\r\n        startRecording,\r\n        stopRecording,\r\n        mediaBlobUrl,\r\n    } = useReactMediaRecorder({ audio: true });\r\n\r\n    const handleVoiceSubmit = async () => {\r\n        stopRecording();\r\n\r\n        // After stopping the recording, send the audio to server\r\n        // Wait until we have a blob URL\r\n        if (status === \"stopped\") {\r\n            const response = await fetch(mediaBlobUrl);\r\n            const blob = await response.blob();\r\n\r\n            // Use FormData to send the audio file\r\n            let formData = new FormData();\r\n            formData.append(\"audio\", blob);\r\n\r\n            // Send the audio file to your server\r\n            fetch(\"http://localhost:8000/chat/audio\", {\r\n                method: \"POST\",\r\n                body: formData\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    // Assuming server responds with text corresponding to the audio\r\n                    // Inject this text into the chat input and submit the form\r\n                    props.handleInput({ target: { value: data.text } });\r\n                    props.handleSubmit();\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className=\"border-t-2 border-gray-700 p-6 flex justify-between\">\r\n            <input type=\"text\" value={props.input} onChange={props.handleInput} className=\"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\" />\r\n            <button type=\"submit\" className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">Ask</button>\r\n            <button type=\"button\" onClick={status === \"recording\" ? handleVoiceSubmit : startRecording} className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">{status === \"recording\" ? \"Stop Recording\" : \"Record\"}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ChatForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,qBAAqB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAM;IACFC,MAAM;IACNC,cAAc;IACdC,aAAa;IACbC;EACJ,CAAC,GAAGT,qBAAqB,CAAC;IAAEU,KAAK,EAAE;EAAK,CAAC,CAAC;EAE1C,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClCH,aAAa,CAAC,CAAC;;IAEf;IACA;IACA,IAAIF,MAAM,KAAK,SAAS,EAAE;MACtB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACJ,YAAY,CAAC;MAC1C,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC7BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;;MAE9B;MACAD,KAAK,CAAC,kCAAkC,EAAE;QACtCK,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEJ;MACV,CAAC,CAAC,CACGK,IAAI,CAACR,QAAQ,IAAIA,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CACjCD,IAAI,CAACE,IAAI,IAAI;QACV;QACA;QACAlB,KAAK,CAACmB,WAAW,CAAC;UAAEC,MAAM,EAAE;YAAEC,KAAK,EAAEH,IAAI,CAACI;UAAK;QAAE,CAAC,CAAC;QACnDtB,KAAK,CAACuB,YAAY,CAAC,CAAC;MACxB,CAAC,CAAC;IACV;EACJ,CAAC;EAED,oBACIzB,OAAA;IAAM0B,QAAQ,EAAExB,KAAK,CAACuB,YAAa;IAACE,SAAS,EAAC,qDAAqD;IAAAC,QAAA,gBAC/F5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACN,KAAK,EAAErB,KAAK,CAAC4B,KAAM;MAACC,QAAQ,EAAE7B,KAAK,CAACmB,WAAY;MAACM,SAAS,EAAC;IAAoK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrPnC,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAC;IAAG;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChJnC,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAACO,OAAO,EAAEhC,MAAM,KAAK,WAAW,GAAGK,iBAAiB,GAAGJ,cAAe;MAACsB,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAExB,MAAM,KAAK,WAAW,GAAG,gBAAgB,GAAG;IAAQ;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvQ,CAAC;AAEf;AAAChC,EAAA,CA3CQF,QAAQ;EAAA,QAMTH,qBAAqB;AAAA;AAAAuC,EAAA,GANpBpC,QAAQ;AA6CjB,eAAeA,QAAQ;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}