{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\testProject\\\\my-app\\\\src\\\\ChatForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback } from 'react';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatForm(props) {\n  _s();\n  const {\n    status,\n    startRecording,\n    stopRecording,\n    mediaBlobUrl\n  } = useReactMediaRecorder({\n    audio: true\n  });\n  const fetchAudioAndSubmit = useCallback(async blob => {\n    const file = new File([blob], \"recorded_audio.wav\", {\n      type: \"audio/wav\"\n    });\n\n    // Create a FormData object\n    let formData = new FormData();\n\n    // Add the file to the form data\n    formData.append(\"audio\", file);\n\n    // Send the audio file to the server\n    fetch(\"http://localhost:8000/chat/audio\", {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json()).then(data => {\n      // Assuming server responds with text corresponding to the audio\n      // Inject this text into the chat input and submit the form\n      props.handleInput({\n        target: {\n          value: data.text\n        }\n      });\n      props.handleSubmit();\n    });\n  }, [props]);\n  useEffect(() => {\n    if (status === \"stopped\" && mediaBlobUrl) {\n      fetch(mediaBlobUrl).then(res => res.blob()).then(fetchAudioAndSubmit);\n    }\n  }, [status, mediaBlobUrl, fetchAudioAndSubmit]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.handleSubmit,\n    className: \"border-t-2 border-gray-700 p-6 flex justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.input,\n      onChange: props.handleInput,\n      className: \"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: \"Ask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: status === \"recording\" ? stopRecording : startRecording,\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: status === \"recording\" ? \"Stop Recording\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatForm, \"f7b5/Z7xKzPt6LqEXcc2aI8RvmY=\", false, function () {\n  return [useReactMediaRecorder];\n});\n_c = ChatForm;\nexport default ChatForm;\nvar _c;\n$RefreshReg$(_c, \"ChatForm\");","map":{"version":3,"names":["React","useEffect","useCallback","useReactMediaRecorder","jsxDEV","_jsxDEV","ChatForm","props","_s","status","startRecording","stopRecording","mediaBlobUrl","audio","fetchAudioAndSubmit","blob","file","File","type","formData","FormData","append","fetch","method","body","then","response","json","data","handleInput","target","value","text","handleSubmit","res","onSubmit","className","children","input","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/testProject/my-app/src/ChatForm.js"],"sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\n\r\nfunction ChatForm(props) {\r\n    const {\r\n        status,\r\n        startRecording,\r\n        stopRecording,\r\n        mediaBlobUrl,\r\n    } = useReactMediaRecorder({ audio: true });\r\n\r\n    const fetchAudioAndSubmit = useCallback(async (blob) => {\r\n        const file = new File([blob], \"recorded_audio.wav\", { type: \"audio/wav\" });\r\n\r\n        // Create a FormData object\r\n        let formData = new FormData();\r\n\r\n        // Add the file to the form data\r\n        formData.append(\"audio\", file);\r\n\r\n        // Send the audio file to the server\r\n        fetch(\"http://localhost:8000/chat/audio\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Assuming server responds with text corresponding to the audio\r\n                // Inject this text into the chat input and submit the form\r\n                props.handleInput({ target: { value: data.text } });\r\n                props.handleSubmit();\r\n            });\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        if (status === \"stopped\" && mediaBlobUrl) {\r\n            fetch(mediaBlobUrl)\r\n                .then(res => res.blob())\r\n                .then(fetchAudioAndSubmit);\r\n        }\r\n    }, [status, mediaBlobUrl, fetchAudioAndSubmit]);\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className=\"border-t-2 border-gray-700 p-6 flex justify-between\">\r\n            <input type=\"text\" value={props.input} onChange={props.handleInput} className=\"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\" />\r\n            <button type=\"submit\" className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">Ask</button>\r\n            <button type=\"button\" onClick={status === \"recording\" ? stopRecording : startRecording} className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">{status === \"recording\" ? \"Stop Recording\" : \"Record\"}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ChatForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACrD,SAASC,qBAAqB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAM;IACFC,MAAM;IACNC,cAAc;IACdC,aAAa;IACbC;EACJ,CAAC,GAAGT,qBAAqB,CAAC;IAAEU,KAAK,EAAE;EAAK,CAAC,CAAC;EAE1C,MAAMC,mBAAmB,GAAGZ,WAAW,CAAC,MAAOa,IAAI,IAAK;IACpD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAE,oBAAoB,EAAE;MAAEG,IAAI,EAAE;IAAY,CAAC,CAAC;;IAE1E;IACA,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE7B;IACAD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,IAAI,CAAC;;IAE9B;IACAM,KAAK,CAAC,kCAAkC,EAAE;MACtCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACV,CAAC,CAAC,CACGM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACV;MACA;MACArB,KAAK,CAACsB,WAAW,CAAC;QAAEC,MAAM,EAAE;UAAEC,KAAK,EAAEH,IAAI,CAACI;QAAK;MAAE,CAAC,CAAC;MACnDzB,KAAK,CAAC0B,YAAY,CAAC,CAAC;IACxB,CAAC,CAAC;EACV,CAAC,EAAE,CAAC1B,KAAK,CAAC,CAAC;EAEXN,SAAS,CAAC,MAAM;IACZ,IAAIQ,MAAM,KAAK,SAAS,IAAIG,YAAY,EAAE;MACtCU,KAAK,CAACV,YAAY,CAAC,CACda,IAAI,CAACS,GAAG,IAAIA,GAAG,CAACnB,IAAI,CAAC,CAAC,CAAC,CACvBU,IAAI,CAACX,mBAAmB,CAAC;IAClC;EACJ,CAAC,EAAE,CAACL,MAAM,EAAEG,YAAY,EAAEE,mBAAmB,CAAC,CAAC;EAE/C,oBACIT,OAAA;IAAM8B,QAAQ,EAAE5B,KAAK,CAAC0B,YAAa;IAACG,SAAS,EAAC,qDAAqD;IAAAC,QAAA,gBAC/FhC,OAAA;MAAOa,IAAI,EAAC,MAAM;MAACa,KAAK,EAAExB,KAAK,CAAC+B,KAAM;MAACC,QAAQ,EAAEhC,KAAK,CAACsB,WAAY;MAACO,SAAS,EAAC;IAAoK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrPtC,OAAA;MAAQa,IAAI,EAAC,QAAQ;MAACkB,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAC;IAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChJtC,OAAA;MAAQa,IAAI,EAAC,QAAQ;MAAC0B,OAAO,EAAEnC,MAAM,KAAK,WAAW,GAAGE,aAAa,GAAGD,cAAe;MAAC0B,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAE5B,MAAM,KAAK,WAAW,GAAG,gBAAgB,GAAG;IAAQ;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnQ,CAAC;AAEf;AAACnC,EAAA,CA9CQF,QAAQ;EAAA,QAMTH,qBAAqB;AAAA;AAAA0C,EAAA,GANpBvC,QAAQ;AAgDjB,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}