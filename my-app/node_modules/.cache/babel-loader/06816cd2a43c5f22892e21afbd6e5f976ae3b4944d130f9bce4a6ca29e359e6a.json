{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\testProject\\\\my-app\\\\src\\\\ChatForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatForm(props) {\n  _s();\n  const {\n    status,\n    startRecording,\n    stopRecording,\n    mediaBlobUrl\n  } = useReactMediaRecorder({\n    audio: true\n  });\n\n  // Effect that runs whenever the status changes\n  useEffect(() => {\n    // If the recording has just been stopped\n    if (status === \"stopped\") {\n      // Send the audio to the server\n      fetchAudioAndSubmit();\n    }\n  }, [status]); // Only re-run the effect if the status changes\n\n  const fetchAudioAndSubmit = async () => {\n    const response = await fetch(mediaBlobUrl);\n    const blob = await response.blob();\n\n    // Use FormData to send the audio file\n    let formData = new FormData();\n    formData.append(\"audio\", blob);\n\n    // Send the audio file to your server\n    fetch(\"http://localhost:8000/chat/audio\", {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json()).then(data => {\n      // Assuming server responds with text corresponding to the audio\n      // Inject this text into the chat input and submit the form\n      props.handleInput({\n        target: {\n          value: data.text\n        }\n      });\n      props.handleSubmit();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.handleSubmit,\n    className: \"border-t-2 border-gray-700 p-6 flex justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.input,\n      onChange: props.handleInput,\n      className: \"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: \"Ask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: status === \"recording\" ? stopRecording : startRecording,\n      className: \"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\",\n      children: status === \"recording\" ? \"Stop Recording\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatForm, \"5zYGm0l2xt1FTY+NIN9tZcXmiqs=\", false, function () {\n  return [useReactMediaRecorder];\n});\n_c = ChatForm;\nexport default ChatForm;\nvar _c;\n$RefreshReg$(_c, \"ChatForm\");","map":{"version":3,"names":["React","useEffect","useReactMediaRecorder","jsxDEV","_jsxDEV","ChatForm","props","_s","status","startRecording","stopRecording","mediaBlobUrl","audio","fetchAudioAndSubmit","response","fetch","blob","formData","FormData","append","method","body","then","json","data","handleInput","target","value","text","handleSubmit","onSubmit","className","children","type","input","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/testProject/my-app/src/ChatForm.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\n\r\nfunction ChatForm(props) {\r\n    const {\r\n        status,\r\n        startRecording,\r\n        stopRecording,\r\n        mediaBlobUrl,\r\n    } = useReactMediaRecorder({ audio: true });\r\n\r\n    // Effect that runs whenever the status changes\r\n    useEffect(() => {\r\n        // If the recording has just been stopped\r\n        if (status === \"stopped\") {\r\n            // Send the audio to the server\r\n            fetchAudioAndSubmit();\r\n        }\r\n    }, [status]); // Only re-run the effect if the status changes\r\n\r\n    const fetchAudioAndSubmit = async () => {\r\n        const response = await fetch(mediaBlobUrl);\r\n        const blob = await response.blob();\r\n\r\n        // Use FormData to send the audio file\r\n        let formData = new FormData();\r\n        formData.append(\"audio\", blob);\r\n\r\n        // Send the audio file to your server\r\n        fetch(\"http://localhost:8000/chat/audio\", {\r\n            method: \"POST\",\r\n            body: formData,\r\n            \r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Assuming server responds with text corresponding to the audio\r\n                // Inject this text into the chat input and submit the form\r\n                props.handleInput({ target: { value: data.text } });\r\n                props.handleSubmit();\r\n            });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className=\"border-t-2 border-gray-700 p-6 flex justify-between\">\r\n            <input type=\"text\" value={props.input} onChange={props.handleInput} className=\"chat-input flex-grow mr-2 py-2 px-4 rounded-lg border-2 border-gray-700 focus:outline-none focus:border-blue-500 transition duration-150 bg-gray-700 text-gray-200\" />\r\n            <button type=\"submit\" className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">Ask</button>\r\n            <button type=\"button\" onClick={status === \"recording\" ? stopRecording : startRecording} className=\"chat-submit bg-gray-800 hover:bg-gray-700 text-white py-2 px-6 rounded-lg transition duration-150\">{status === \"recording\" ? \"Stop Recording\" : \"Record\"}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ChatForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,qBAAqB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAM;IACFC,MAAM;IACNC,cAAc;IACdC,aAAa;IACbC;EACJ,CAAC,GAAGT,qBAAqB,CAAC;IAAEU,KAAK,EAAE;EAAK,CAAC,CAAC;;EAE1C;EACAX,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,MAAM,KAAK,SAAS,EAAE;MACtB;MACAK,mBAAmB,CAAC,CAAC;IACzB;EACJ,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,MAAMK,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,YAAY,CAAC;IAC1C,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;;IAElC;IACA,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC7BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;;IAE9B;IACAD,KAAK,CAAC,kCAAkC,EAAE;MACtCK,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEJ;IAEV,CAAC,CAAC,CACGK,IAAI,CAACR,QAAQ,IAAIA,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CACjCD,IAAI,CAACE,IAAI,IAAI;MACV;MACA;MACAlB,KAAK,CAACmB,WAAW,CAAC;QAAEC,MAAM,EAAE;UAAEC,KAAK,EAAEH,IAAI,CAACI;QAAK;MAAE,CAAC,CAAC;MACnDtB,KAAK,CAACuB,YAAY,CAAC,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EAED,oBACIzB,OAAA;IAAM0B,QAAQ,EAAExB,KAAK,CAACuB,YAAa;IAACE,SAAS,EAAC,qDAAqD;IAAAC,QAAA,gBAC/F5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACN,KAAK,EAAErB,KAAK,CAAC4B,KAAM;MAACC,QAAQ,EAAE7B,KAAK,CAACmB,WAAY;MAACM,SAAS,EAAC;IAAoK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrPnC,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAC;IAAG;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChJnC,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAACO,OAAO,EAAEhC,MAAM,KAAK,WAAW,GAAGE,aAAa,GAAGD,cAAe;MAACsB,SAAS,EAAC,mGAAmG;MAAAC,QAAA,EAAExB,MAAM,KAAK,WAAW,GAAG,gBAAgB,GAAG;IAAQ;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnQ,CAAC;AAEf;AAAChC,EAAA,CA/CQF,QAAQ;EAAA,QAMTH,qBAAqB;AAAA;AAAAuC,EAAA,GANpBpC,QAAQ;AAiDjB,eAAeA,QAAQ;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}