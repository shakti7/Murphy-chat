{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\testProject\\\\my-app\\\\src\\\\ChatPage.js\";\n// ChatPage.js\n\nimport React from 'react';\nimport VoiceRecorder from './VoiceRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass ChatPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    // ...\n    this.handleVoiceRecord = audioBlob => {\n      // Here you can send the audioBlob to the server and get the transcription\n      // This is just a placeholder, you'll need to replace this with your actual logic.\n\n      // Convert blob to base64 to be able to send as JSON\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64AudioMessage = reader.result.split(',')[1];\n        fetch(\"YOUR_GOOGLE_SPEECH_TO_TEXT_API_ENDPOINT\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            audio: {\n              content: base64AudioMessage\n            },\n            config: {\n              encoding: \"LINEAR16\",\n              // Depends on the audio format\n              sampleRateHertz: 16000,\n              // Depends on the audio format\n              languageCode: \"en-US\"\n            }\n          })\n        }).then(response => response.json()).then(data => {\n          const message = data.results[0].alternatives[0].transcript;\n          // Add the message to the chat\n          this.handleSubmit({\n            target: {\n              value: message\n            }\n          });\n        }).catch(error => console.error('Error:', error));\n      };\n      reader.readAsDataURL(audioBlob);\n    };\n  }\n  // ...\n\n  render() {\n    // ...\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n        onRecord: this.handleVoiceRecord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n}\n\n// ...\n\nexport default ChatPage;","map":{"version":3,"names":["React","VoiceRecorder","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","Component","constructor","args","handleVoiceRecord","audioBlob","reader","FileReader","onloadend","base64AudioMessage","result","split","fetch","method","headers","body","JSON","stringify","audio","content","config","encoding","sampleRateHertz","languageCode","then","response","json","data","message","results","alternatives","transcript","handleSubmit","target","value","catch","error","console","readAsDataURL","render","children","onRecord","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/OneDrive/Desktop/testProject/my-app/src/ChatPage.js"],"sourcesContent":["// ChatPage.js\r\n\r\nimport React from 'react';\r\nimport VoiceRecorder from './VoiceRecorder';\r\n\r\nclass ChatPage extends React.Component {\r\n    // ...\r\n\r\n    handleVoiceRecord = (audioBlob) => {\r\n        // Here you can send the audioBlob to the server and get the transcription\r\n        // This is just a placeholder, you'll need to replace this with your actual logic.\r\n\r\n        // Convert blob to base64 to be able to send as JSON\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            const base64AudioMessage = reader.result.split(',')[1];\r\n\r\n            fetch(\"YOUR_GOOGLE_SPEECH_TO_TEXT_API_ENDPOINT\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    audio: {\r\n                        content: base64AudioMessage\r\n                    },\r\n                    config: {\r\n                        encoding: \"LINEAR16\", // Depends on the audio format\r\n                        sampleRateHertz: 16000, // Depends on the audio format\r\n                        languageCode: \"en-US\"\r\n                    }\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const message = data.results[0].alternatives[0].transcript;\r\n                    // Add the message to the chat\r\n                    this.handleSubmit({ target: { value: message } });\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        };\r\n        reader.readAsDataURL(audioBlob);\r\n    };\r\n\r\n    // ...\r\n\r\n    render() {\r\n        // ...\r\n        return (\r\n            <>\r\n                {/* ... other components ... */}\r\n                <VoiceRecorder onRecord={this.handleVoiceRecord} />\r\n                {/* ... other components ... */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// ...\r\n\r\nexport default ChatPage;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,QAAQ,SAASN,KAAK,CAACO,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACnC;IAAA,KAEAC,iBAAiB,GAAIC,SAAS,IAAK;MAC/B;MACA;;MAEA;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACrB,MAAMC,kBAAkB,GAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEtDC,KAAK,CAAC,yCAAyC,EAAE;UAC7CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBC,KAAK,EAAE;cACHC,OAAO,EAAEV;YACb,CAAC;YACDW,MAAM,EAAE;cACJC,QAAQ,EAAE,UAAU;cAAE;cACtBC,eAAe,EAAE,KAAK;cAAE;cACxBC,YAAY,EAAE;YAClB;UACJ,CAAC;QACL,CAAC,CAAC,CACGC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;UACV,MAAMC,OAAO,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC,CAACC,UAAU;UAC1D;UACA,IAAI,CAACC,YAAY,CAAC;YAAEC,MAAM,EAAE;cAAEC,KAAK,EAAEN;YAAQ;UAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;MACvD,CAAC;MACD9B,MAAM,CAACgC,aAAa,CAACjC,SAAS,CAAC;IACnC,CAAC;EAAA;EAED;;EAEAkC,MAAMA,CAAA,EAAG;IACL;IACA,oBACI1C,OAAA,CAAAE,SAAA;MAAAyC,QAAA,eAEI3C,OAAA,CAACF,aAAa;QAAC8C,QAAQ,EAAE,IAAI,CAACrC;MAAkB;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,gBAErD,CAAC;EAEX;AACJ;;AAEA;;AAEA,eAAe7C,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}